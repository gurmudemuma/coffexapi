# Docker Compose Production Environment
# Coffee Export Platform - Production Configuration

version: '3.8'

services:
  # ============================================================================
  # PRODUCTION SERVICES
  # ============================================================================
  
  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: nginx-production
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../deploy/nginx/conf.d:/etc/nginx/conf.d:ro
      - ../deploy/certs:/etc/nginx/certs:ro
      - ../frontend/dist:/var/www/html:ro
    depends_on:
      - api-gateway
      - frontend
    networks:
      - coffee_net
    restart: unless-stopped

  # API Gateway - Production Mode
  api-gateway:
    build:
      context: ../api-gateway
      target: production
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=WARN
      - ENABLE_MONITORING=true
      - ENABLE_METRICS=true
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - coffee_net
      - validator_net
    restart: unless-stopped

  # Frontend - Production Mode
  frontend:
    build:
      context: ../frontend
      target: production
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://api.coffee-export.com
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - coffee_net
    restart: unless-stopped

  # Production database
  mongodb:
    image: mongo:6
    container_name: mongodb-production
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=coffee_export_production
    volumes:
      - mongodb_prod_data:/data/db
      - ../deploy/mongo-init:/docker-entrypoint-initdb.d
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    networks:
      - coffee_net
    restart: unless-stopped

  # Production Redis
  redis:
    image: redis:7-alpine
    container_name: redis-production
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    networks:
      - coffee_net
    restart: unless-stopped

  # ============================================================================
  # MONITORING STACK
  # ============================================================================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-production
    volumes:
      - ../deploy/monitoring/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - ../deploy/monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_prod_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    networks:
      - coffee_net
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-production
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ../deploy/monitoring/grafana-dashboards:/var/lib/grafana/dashboards
      - ../deploy/monitoring/grafana-datasources:/etc/grafana/provisioning/datasources
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    networks:
      - coffee_net
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager-production
    volumes:
      - ../deploy/monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_prod_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
    networks:
      - coffee_net
    restart: unless-stopped

  # ============================================================================
  # LOGGING STACK
  # ============================================================================
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: elasticsearch-production
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_prod_data:/usr/share/elasticsearch/data
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    networks:
      - coffee_net
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: logstash-production
    volumes:
      - ../deploy/logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    environment:
      - "LS_JAVA_OPTS=-Xmx512m -Xms512m"
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    networks:
      - coffee_net
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: kibana-production
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    networks:
      - coffee_net
    restart: unless-stopped

  # ============================================================================
  # BACKUP SERVICE
  # ============================================================================
  
  backup:
    image: instrumentisto/rsync-ssh
    container_name: backup-production
    volumes:
      - mongodb_prod_data:/backup/mongodb:ro
      - redis_prod_data:/backup/redis:ro
      - prometheus_prod_data:/backup/prometheus:ro
      - grafana_prod_data:/backup/grafana:ro
      - ../deploy/backup/backup-script.sh:/backup-script.sh:ro
      - ../deploy/backup/ssh-keys:/root/.ssh:ro
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - BACKUP_S3_BUCKET=${BACKUP_S3_BUCKET}
    command: crond -f
    networks:
      - coffee_net
    restart: unless-stopped

  # ============================================================================
  # VALIDATOR SERVICES - Production Mode
  # ============================================================================
  
  national-bank-validator:
    build:
      context: ..
      dockerfile: validators/national-bank/Dockerfile
      target: production
    environment:
      - VALIDATOR_TYPE=LICENSE
      - VALID_LICENSES=${PROD_VALID_LICENSES}
      - PORT=8080
      - LOG_LEVEL=WARN
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - validator_net
    restart: unless-stopped

  bank-api-validator:
    build:
      context: ..
      dockerfile: validators/bank-api/Dockerfile
      target: production
    environment:
      - VALIDATOR_TYPE=INVOICE
      - VALID_INVOICES=${PROD_VALID_INVOICES}
      - PORT=5000
      - LOG_LEVEL=WARN
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - validator_net
    restart: unless-stopped

  quality-authority-validator:
    build:
      context: ..
      dockerfile: validators/quality-authority/Dockerfile
      target: production
    environment:
      - VALIDATOR_TYPE=QUALITY
      - VALID_QUALITY_CERTS=${PROD_VALID_QUALITY_CERTS}
      - PORT=8081
      - LOG_LEVEL=WARN
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - validator_net
    restart: unless-stopped

  customs-validator:
    build:
      context: ..
      dockerfile: validators/customs/Dockerfile
      target: production
    environment:
      - VALIDATOR_TYPE=SHIPPING
      - VALID_SHIPPING_DOCS=${PROD_VALID_SHIPPING_DOCS}
      - PORT=8082
      - LOG_LEVEL=WARN
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - validator_net
    restart: unless-stopped

volumes:
  mongodb_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  prometheus_prod_data:
    driver: local
  grafana_prod_data:
    driver: local
  alertmanager_prod_data:
    driver: local
  elasticsearch_prod_data:
    driver: local

networks:
  coffee_net:
    driver: bridge
  validator_net:
    driver: bridge

# ============================================================================
# SECRETS (to be used with Docker Swarm)
# ============================================================================
secrets:
  mongo_root_password:
    external: true
  redis_password:
    external: true
  grafana_admin_password:
    external: true
  ssl_certificate:
    external: true
  ssl_private_key:
    external: true