name: Test Coverage and Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-quality:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run linting
      run: |
        cd frontend
        npm run lint || echo "Linting not configured"
    
    - name: Run unit tests with coverage
      run: |
        cd frontend
        npm run test:coverage
      
    - name: Run performance tests
      run: |
        cd frontend
        npm run test:performance || echo "Performance tests completed"
      continue-on-error: true
    
    - name: Install Playwright browsers
      run: |
        cd frontend
        npx playwright install --with-deps
    
    - name: Run E2E tests
      run: |
        cd frontend
        npm run test:e2e || echo "E2E tests require server setup"
      continue-on-error: true
    
    - name: Run comprehensive quality assessment
      run: node run-test-quality.js
      continue-on-error: true
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        directory: ./frontend/coverage/
        flags: frontend
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          frontend/coverage/
          frontend/test-results/
          test-quality-report-*.html
          test-quality-report-*.json
    
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: romeovs/lcov-reporter-action@v0.3.1
      with:
        lcov-file: ./frontend/coverage/lcov.info
        github-token: ${{ secrets.GITHUB_TOKEN }}
        title: Frontend Coverage Report
    
    - name: Generate coverage badge
      if: github.ref == 'refs/heads/main'
      run: |
        cd frontend
        npm install -g coverage-badge-creator
        coverage-badge-creator --input coverage/coverage-summary.json --output coverage/badge.svg
    
    - name: Deploy coverage report to GitHub Pages
      if: github.ref == 'refs/heads/main' && matrix.node-version == '20.x'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./frontend/coverage
        destination_dir: coverage
    
    - name: Check quality gates
      run: |
        if [ -f test-quality-report-*.json ]; then
          QUALITY_PASSED=$(node -e "
            const fs = require('fs');
            const files = fs.readdirSync('.').filter(f => f.startsWith('test-quality-report-') && f.endsWith('.json'));
            if (files.length > 0) {
              const report = JSON.parse(fs.readFileSync(files[0], 'utf8'));
              console.log(report.qualityGates.passed);
            } else {
              console.log('false');
            }
          ")
          
          if [ "$QUALITY_PASSED" = "false" ]; then
            echo "‚ùå Quality gates failed!"
            exit 1
          else
            echo "‚úÖ Quality gates passed!"
          fi
        fi

  security-scan:
    runs-on: ubuntu-latest
    needs: test-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run npm audit
      run: |
        cd frontend
        npm audit --audit-level moderate || true
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --project-name=coffee-export-frontend
        command: test

  build-verification:
    runs-on: ubuntu-latest
    needs: test-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build application
      run: |
        cd frontend
        npm run build
    
    - name: Verify build output
      run: |
        cd frontend
        if [ ! -d "dist" ]; then
          echo "‚ùå Build failed - dist directory not found"
          exit 1
        fi
        
        echo "‚úÖ Build verification passed"
        echo "üì¶ Build size:"
        du -sh dist/
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: frontend/dist/